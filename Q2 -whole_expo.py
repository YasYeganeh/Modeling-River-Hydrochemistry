import numpy as np
import pandas as pd
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt

df_original=pd.read_excel('AH_HW7_Data_14002_original.xlsx',sheet_name='Streamflow')
df_rainfall=pd.read_excel('AH_HW7_Data_14002_basefr.xlsx',sheet_name='Rainfall')
# print(df_rainfall)
df_streamflow=pd.read_excel('AH_HW7_Data_14002_basefr.xlsx',sheet_name='Streamflow')
# print(df_streamflow)


############### TTD = normal dist
index=2375
In_sigma=df_rainfall['Cl mg/l']
Out_obs=df_streamflow['Cl mg/l']
# print(In_sigma)
# print(In_sigma[0])

R2={'(0.01)': 0.037699992738386257, '(0.02)': 0.02715797166080022, '(0.03)': 0.02225160966238058, '(0.04)': 0.019088760815181093, '(0.05)': 0.01677973680102958, '(0.060000000000000005)': 0.0149962189783787, '(0.06999999999999999)': 0.013572746231984428, '(0.08)': 0.012410484854554647, '(0.09)': 0.011444903627922491, '(0.09999999999999999)': 0.010631519126500682, '(0.11)': 0.009938466399069108, '(0.12)': 0.009342235405520934, '(0.13)': 0.008825064802044424, '(0.14)': 0.008373271318634842, '(0.15000000000000002)': 0.00797613724839392, '(0.16)': 0.00762514619098365, '(0.17)': 0.007313444472763538, '(0.18000000000000002)': 0.007035453500690566, '(0.19)': 0.006786585732490986, '(0.2)': 0.006563033333546832, '(0.21000000000000002)': 0.006361608755192845, '(0.22)': 0.00617962298112049, '(0.23)': 0.006014791476577175, '(0.24000000000000002)': 0.005865160763535934, '(0.25)': 0.005729050527733979, '(0.26)': 0.005605007546093011, '(0.27)': 0.005491768700270582, '(0.28)': 0.005388231041065159, '(0.29000000000000004)': 0.005293427373749965, '(0.3)': 0.0052065062034473315, '(0.31)': 0.005126715151711246, '(0.32)': 0.0050533871578734854, '(0.33)': 0.004985928930598587, '(0.34)': 0.0049238112300590674, '(0.35000000000000003)': 0.004866560648880527, '(0.36000000000000004)': 0.004813752627506394, '(0.37)': 0.004765005491961104, '(0.38)': 0.004719975342864195, '(0.39)': 0.004678351656699956, '(0.4)': 0.004639853485812085, '(0.41000000000000003)': 0.004604226163892108, '(0.42000000000000004)': 0.004571238440012096, '(0.43)': 0.004540679977386543, '(0.44)': 0.004512359163702893, '(0.45)': 0.004486101188548666, '(0.46)': 0.004461746350581024, '(0.47000000000000003)': 0.0044391485629458076, '(0.48000000000000004)': 0.0044181740302968635, '(0.49)': 0.004398700074790229, '(0.5)': 0.004380614091779035, '(0.51)': 0.00436381261873973, '(0.52)': 0.004348200503314282, '(0.53)': 0.0043336901583353755, '(0.54)': 0.004320200893377264, '(0.55)': 0.004307658313794211, '(0.56)': 0.004295993779415227, '(0.5700000000000001)': 0.004285143916092318, '(0.5800000000000001)': 0.004275050174178245, '(0.59)': 0.004265658428762957, '(0.6)': 0.0042569186171444165, '(0.61)': 0.0042487844095668624, '(0.62)': 0.004241212909739881, '(0.63)': 0.00423416438206737, '(0.64)': 0.004227602002876744, '(0.65)': 0.004221491633250439, '(0.66)': 0.0042158016113361335, '(0.67)': 0.004210502562248927, '(0.68)': 0.004205567223886957, '(0.6900000000000001)': 0.004200970287164626, '(0.7000000000000001)': 0.004196688249327108, '(0.7100000000000001)': 0.004192699279150843, '(0.72)': 0.004188983092958332, '(0.73)': 0.004185520840485647, '(0.74)': 0.004182294999737296, '(0.75)': 0.00417928928004923, '(0.76)': 0.004176488532656999, '(0.77)': 0.004173878668133504, '(0.78)': 0.004171446580121584, '(0.79)': 0.004169180074840184, '(0.8)': 0.004167067805891351, '(0.81)': 0.004165099213938086, '(0.8200000000000001)': 0.004163264470862007, '(0.8300000000000001)': 0.0041615544280444875, '(0.8400000000000001)': 0.004159960568446292, '(0.85)': 0.0041584749621884, '(0.86)': 0.004157090225363261, '(0.87)': 0.00415579948182729, '(0.88)': 0.004154596327747409, '(0.89)': 0.004153474798692721, '(0.9)': 0.004152429339079611, '(0.91)': 0.004151454773794187, '(0.92)': 0.004150546281830149, '(0.93)': 0.004149699371793134, '(0.9400000000000001)': 0.004148909859133995, '(0.9500000000000001)': 0.004148173844984775, '(0.9600000000000001)': 0.004147487696480535, '(0.97)': 0.004146848028459411, '(0.98)': 0.004146251686441383, '(0.99)': 0.004145695730793792}
max_value = max(R2, key=R2.get)
print(max_value)

landa=0.01

def TTD(landa,taw):
    TTD_value= landa*np.exp(-(landa*7*taw))
    return TTD_value

# ttd=[]
# for taw in range(0,index,1):
#     ttd.append(TTD(landa,taw))
# print(ttd)

C_simu={}
for t in range(0,index,1):
    out_simu = 0
    for taw in range(0,t+1,1):
        out_simu+= TTD(landa,taw)*In_sigma[t-taw]
    C_simu[t]=[out_simu,Out_obs[t]]
print('simu & obs concentraition=',C_simu)

### NORMAL DIST CALIBRATION

simulation_list=[]
observation_list=[]
for t in range(0,index,1):
    simulation_list.append(C_simu[t][0])
    observation_list.append(C_simu[t][1])
corr_matrix = np.corrcoef(observation_list, simulation_list)
corr = corr_matrix[0, 1]
R_sq = corr ** 2
print('simu=',simulation_list)
print('obs=',observation_list)
print('R squared=',R_sq)


plt.figure()
plt.plot(simulation_list,'b', label="Simulation")
plt.plot(df_original['Cl mg/l'].to_numpy(),'g', label="Observation")
plt.margins(x=0, y=0)
plt.title("Chloride Prediction with Exponential Distribution TTD",size=18)
plt.xticks(fontsize=13)
plt.yticks(fontsize=13)
plt.ylabel("Chloride Concentration (mg/l)",size=18)
plt.xlabel("time step (7hr)",size=18)
plt.legend(fontsize=20)
plt.grid()
plt.show()
